package templates

import "github.com/Sinanaas/gotth-financial-tracker/internal/models"
import "github.com/Sinanaas/gotth-financial-tracker/internal/utils"
import "github.com/Sinanaas/gotth-financial-tracker/internal/constants"
import "fmt"
import "strconv"

templ Recurring(categories []models.Category, recurring []models.Recurring, accounts []models.Account, transactionType []string, periodicity []string) {
<main class="container mx-auto p-4 min-h-full top-0">
    <div class="flex flex-col md:flex-row gap-6">
        <div hx-ext="response-targets" class="w-full md:w-1/3">
            <form
                    hx-post="/recurring"
                    hx-trigger="submit"
                    hx-target-401="#transaction-error"
                    hx-encoding="application/x-www-form-urlencoded"
                    class="flex flex-col bg-slate-100 p-6 rounded-lg shadow-md gap-4"
            >
                <div class="flex justify-center items-center border-b border-slate-300 pb-4 mb-4">
                    <h2 class="text-xl font-bold text-slate-700">
                        Add a Recurring Transaction
                    </h2>
                </div>
                <div class="flex flex-col gap-2">
                    <label for="amount" class="text-slate-600 font-semibold">Amount</label>
                    <input
                            type="number"
                            name="Amount"
                            id="amount"
                            placeholder="0.00"
                            class="rounded p-2 border border-slate-300"
                            min="0"
                            required
                            onkeyup="this.setCustomValidity('')"
                            hx-on:htmx:validation:validate="
                            if (this.value < 0) {
                                this.setCustomValidity('Amount cannot be negative.');
                                htmx.find('#account-form').reportValidity();
                            } else {
                                this.setCustomValidity('');
                                htmx.find('#account-form').reportValidity();
                            }
                        "
                    />
                </div>
                <div class="flex flex-col gap-2">
                    <label for="type" class="text-slate-600 font-semibold">Type</label>
                    <select
                            name="Type"
                            id="type"
                            class="rounded p-2 border border-slate-300"
                            required
                            oninvalid="this.setCustomValidity('Please select a transaction type.')"
                            oninput="this.setCustomValidity('')"
                    >
                        <option disabled selected value class="w-full text-slate-600">select a transaction type</option>
                        for i := 0 ; i < len(transactionType) ; i++ {
                        <option class="w-full" value={ strconv.Itoa(i) }>
                            { transactionType[i] }
                        </option>
                        }
                    </select>
                </div>
                <div class="flex flex-col gap-2">
                    <label for="start-date" class="text-slate-600 font-semibold">Start Date</label>
                    <input
                            type="date"
                            name="StartDate"
                            id="start-date"
                            class="rounded p-2 border border-slate-300"
                            required
                            oninvalid="this.setCustomValidity('Please select a start date.')"
                            oninput="this.setCustomValidity('')"
                    />
                </div>
                <div class="flex w-full justify-between gap-6">
                    <div class="flex flex-col gap-2 w-1/2">
                        <label for="account" class="text-slate-600 font-semibold">Account</label>
                        <select
                                name="Account"
                                id="account"
                                class="rounded p-2 w-full border border-slate-300"
                                hx-get="/account/balance"
                                hx-target="#balance"
                                hx-params="Account"
                                required
                                oninvalid="this.setCustomValidity('Please select an account.')"
                                oninput="this.setCustomValidity('')"
                        >
                            <option disabled selected value class="w-full text-slate-600">select an account</option>
                            for _, account := range accounts {
                            <option class="w-full" value={ fmt.Sprintf("%s", account.ID) }>
                            { account.Name }
                            </option>
                            }
                        </select>
                    </div>
                    <div class="flex flex-col gap-2">
                        <label for="balance" class="text-slate-600 font-semibold">Balance</label>
                        <div id="balance" class="text-sm text-gray-900">
                            <div class="text-sm text-gray-900">
                                <input
                                        type="text"
                                        value=""
                                        disabled
                                        class="rounded p-2 border border-slate-300"
                                />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="flex flex-col gap-2">
                    <label for="name" class="text-slate-600 font-semibold">Name</label>
                    <input
                            type="text"
                            name="Name"
                            id="name"
                            placeholder="Name"
                            class="rounded p-2 border border-slate-300"
                            required
                            oninvalid="this.setCustomValidity('Please enter a name.')"
                            oninput="this.setCustomValidity('')"
                    />
                </div>
                <div class="flex flex-col gap-2">
                    <label for="category" class="text-slate-600 font-semibold">Category</label>
                    <select
                            name="Category"
                            id="category"
                            class="rounded p-2 border border-slate-300"
                            required
                            oninvalid="this.setCustomValidity('Please select a category.')"
                            oninput="this.setCustomValidity('')"
                    >
                        <option disabled selected value class="w-full text-slate-600">select a category</option>
                        for _, category := range categories {
                            if category.Name != "Income" {
                                <option value={ fmt.Sprintf("%s", category.ID) }>{ category.Name }</option>
						    }
                        }
                    </select>
                </div>
                <div class="flex flex-col gap-2">
                    <label for="periodicity" class="text-slate-600 font-semibold">Periodicity</label>
                    <select
                            name="Periodicity"
                            id="periodicity"
                            class="rounded p-2 border border-slate-300"
                            required
                            oninvalid="this.setCustomValidity('Please select a periodicity type.')"
                            oninput="this.setCustomValidity('')"
                    >
                        <option disabled selected value class="w-full text-slate-600">select a periodicity type</option>
                        for i := 0 ; i < len(periodicity) ; i++ {
                        <option class="w-full" value={ strconv.Itoa(i) }>
                            { periodicity[i] }
                        </option>
                        }
                    </select>
                </div>
                <button type="submit"
                        class="text-white bg-amber-400 hover:bg-amber-500 font-semibold p-2 rounded-lg shadow-md transition duration-300">
                    Add Recurring Transaction
                </button>
            </form>
        </div>
        <div class="w-full md:w-2/3">
            <div class="w-full flex items-center justify-center">
                <h1 class="text-4xl text-white font-bold text-center mb-6">Recurring Transaction</h1>
            </div>
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                <tr>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Name
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Amount
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Start Date
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Account
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Type
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Category
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Periodicity
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Action
                    </th>
                </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                for _, rec := range recurring {
                <tr>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{ rec.Name }</div>
                    </td>
                    if rec.TransactionType == constants.Income {
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900 text-green-400">Rp. { utils.FormatCurrency(rec.Amount) }</div>
                    </td>
                    } else {
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900 text-red-400">Rp. { utils.FormatCurrency(rec.Amount) }</div>
                    </td>
                    }
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{ rec.StartDate.Format("2006-01-02") }</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{ rec.Account.Name }</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{ rec.TransactionType.ToString() }</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{ rec.Category.Name }</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{ rec.Periodicity.ToString() }</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <form
                                hx-put="/recurring"
                                hx-trigger="submit"
                                hx-target="closest tr"
                                hx-encoding="application/x-www-form-urlencoded"
                        >
                            <input type="hidden" name="RecurringID" value={ fmt.Sprintf("%s", rec.ID) }/>
                            <button type="submit" class="text-white bg-red-500 hover:bg-red-600 font-semibold p-2 rounded-lg shadow-md transition duration-300">Delete</button>
                        </form>
                    </td>
                </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</main>
}
