package templates

templ header() {
	<head>
		<title>GOTTH FINANCIAL TRACKER</title>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0" name="referrer" content="strict-origin-when-cross-origin"/>
		<script src="https://unpkg.com/htmx.org@1.9.10" integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC" crossorigin="anonymous"></script>
		<script src="https://unpkg.com/htmx.org/dist/ext/ws.js"></script>
		<script src="https://unpkg.com/htmx-ext-multi-swap@2.0.0/multi-swap.js"></script>

		<script src="https://unpkg.com/hyperscript.org@0.9.14"></script>
		<script src="https://cdn.tailwindcss.com"></script>
		<link rel="preconnect" href="https://fonts.gstatic.com"/>
		<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet"/>

		<!--		SWAL         -->
		<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

	</head>
}

templ footer() {
	<footer class="p-4 "></footer>
}

templ nav(user_id string) {
	<nav class="container top-0 bg-primary-600 p-4 w-full fixed font-mono">
		<div class="flex justify-between text-white text-xl underline font-normal">
			if user_id == "" {
				<ol class="flex space-x-5"></ol>
				<ol class="flex space-x-5">
					<li class="transform transition-transform ease-in delay-[10ms] hover:translate-y-1">
						<a href="/register">Register</a>
					</li>
					<li class="transform transition-transform ease-in delay-[10ms] hover:translate-y-1">
						<a href="/login">Login</a>
					</li>
				</ol>
			} else {
				<ol class="flex space-x-5">
					<li class="transform transition-transform ease-in delay-[10ms] hover:translate-y-1">
						<a href="/">Home</a>
					</li>
					<li class="transform transition-transform ease-in delay-[10ms] hover:translate-y-1">
						<a href="/transaction">Transaction</a>
					</li>
                    <li class="transform transition-transform ease-in delay-[10ms] hover:translate-y-1">
                        <a href="/recurring">Recurring</a>
                    </li>
                    <li class="transform transition-transform ease-in delay-[10ms] hover:translate-y-1">
                        <a href="/loans">Hutang</a>
                    </li>
					<li class="transform transition-transform ease-in delay-[10ms] hover:translate-y-1">
						<a href="/accounts">Accounts</a>
					</li>
				</ol>
				<ol class="flex space-x-5">
					<li class="cursor-pointer transform transition-transform ease-in delay-[10ms] hover:translate-y-1">
						<a
								hx-get="/logout"
								hx-target="#modals-here"
								hx-trigger="click"
								confirm-with-sweet-alert="true"
								swal-title="Logout"
								swal-text="Logout from your account?"
								swal-icon="warning"
								swal-buttons="true"
								swal-danger="true"
						>
							Logout
						</a>
					</li>
				</ol>
			}
		</div>
	</nav>
}

templ Layout(contents templ.Component, user_id string) {
	@header()
	<body class="flex flex-col items-center h-full w-full bg-gradient-to-b from-amber-400 via-amber-500 to-amber-600 font-mono">
		<div class="flex w-full container items-center justify-center flex-col">
			@nav(user_id)
			<main class="flex-1 pt-[10vh] min-h-[95vh] max-h-[95vh] items-center justify-center flex container" id="profile-container">
				<div id="modals-here"></div>
				@contents
			</main>
		</div>
		<script>
			// confirmation BEFORE request
			document.body.addEventListener('htmx:confirm', function (evt) {
				if (evt.target.matches("[confirm-with-sweet-alert='true']")) {
					evt.preventDefault();

					let title = evt.target.getAttribute("swal-title") || "Are you sure?";
					let text = evt.target.getAttribute("swal-text") || "Are you sure you are sure?";
					let icon = evt.target.getAttribute("swal-icon") || "warning";
					let buttons = evt.target.getAttribute("swal-buttons") !== "false";
					let dangerMode = evt.target.getAttribute("swal-danger") === "true";

					swal({ title, text, icon, buttons, dangerMode }).then((confirmed) => {
						if (confirmed) {
							evt.detail.issueRequest();
						}
					});
				}
			});

			// notification AFTER request
			document.body.addEventListener('htmx:afterRequest', function (evt) {
				let response = evt.detail.xhr.getResponseHeader("HX-Trigger");
				console.log("HX-Trigger Response:", response); // Debugging
				if (response) {
					try {
						let swalData = JSON.parse(response)["swal:alert"];
						if (swalData) {
							swal(swalData).then(() => {
								if (swalData.redirect) {
									window.location.href = swalData.redirect;
								}
							});
						}
					} catch (error) {
						console.error("Failed to parse SweetAlert response:", error);
					}
				}
			});
		</script>
	</body>
}